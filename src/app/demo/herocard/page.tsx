'use client';

import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Trophy, Sparkles, Zap, Crown, Star, Target, ArrowRight, Play, Download, Share } from 'lucide-react';
import Link from 'next/link';

export default function HeroCardDemo() {
  const [selectedPlayer, setSelectedPlayer] = useState(0);
  const [isGenerating, setIsGenerating] = useState(false);
  const [selectedStyle, setSelectedStyle] = useState('championship');
  const [customization, setCustomization] = useState({
    layout: 'vertical',
    background: 'stadium',
    effects: ['glow', 'particles'],
    theme: 'dark'
  });
  const [generationProgress, setGenerationProgress] = useState(0);
  
  // Demo player data
  const demoPlayers = [
    {
      name: "Marcus Johnson",
      school: "Liberty High Eagles",
      sport: "Football",
      position: "Quarterback",
      jersey: "12",
      stats: { passingYards: 2847, touchdowns: 31, completion: "68%" },
      colors: { primary: "#1E3A8A", secondary: "#F59E0B" },
      achievements: ["State Championship MVP", "4.0 GPA Honor Roll", "Team Captain"]
    },
    {
      name: "Sarah Martinez",
      school: "Roosevelt Wolves",
      sport: "Basketball",
      position: "Point Guard",
      jersey: "23",
      stats: { points: 18.5, assists: 7.2, steals: 3.1 },
      colors: { primary: "#7C2D12", secondary: "#DC2626" },
      achievements: ["All-State First Team", "School Assist Record", "Academic All-American"]
    },
    {
      name: "Tyler Chen",
      school: "Westfield Mustangs",
      sport: "Track & Field",
      position: "Sprinter",
      jersey: "7",
      stats: { personal100m: "10.23s", personal200m: "20.45s", relayRecord: "State Record" },
      colors: { primary: "#4B0082", secondary: "#FFD700" },
      achievements: ["State 100m Champion", "Regional Record Holder", "Olympic Training Program"]
    }
  ];

  const currentPlayer = demoPlayers[selectedPlayer];

  const cardStyles = [
    { id: 'championship', name: 'Championship Gold', description: 'Elite tournament-style design with golden accents' },
    { id: 'modern', name: 'Modern Minimalist', description: 'Clean, professional Instagram-ready layout' },
    { id: 'vintage', name: 'Vintage Sports Card', description: 'Classic trading card aesthetic with retro fonts' },
    { id: 'neon', name: 'Neon Gameday', description: 'High-energy design with electric effects' },
    { id: 'academic', name: 'Scholar Athlete', description: 'Academic-focused design highlighting GPA and achievements' }
  ];

  const generateHeroCard = async () => {
    setIsGenerating(true);
    setGenerationProgress(0);
    
    // Simulate realistic AI generation with progress
    const steps = [
      { message: 'Analyzing player data...', duration: 800 },
      { message: 'Generating AI persona...', duration: 1200 },
      { message: 'Creating custom background...', duration: 1000 },
      { message: 'Applying team branding...', duration: 900 },
      { message: 'Optimizing layout...', duration: 700 },
      { message: 'Adding special effects...', duration: 600 },
      { message: 'Finalizing HeroCard...', duration: 500 }
    ];
    
    for (let i = 0; i < steps.length; i++) {
      await new Promise(resolve => setTimeout(resolve, steps[i].duration));
      setGenerationProgress(((i + 1) / steps.length) * 100);
    }
    
    setIsGenerating(false);
    setGenerationProgress(0);
  };

  return (
    <div className="min-h-screen bg-black text-white">
      {/* Header */}
      <div className="bg-gradient-to-r from-[#F59E0B] to-[#F97316] py-16">
        <div className="max-w-7xl mx-auto px-4 text-center">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="mb-8"
          >
            <Crown className="w-16 h-16 mx-auto mb-4 text-black" />
            <h1 className="text-5xl font-black text-black mb-4">
              AI HEROCARD GENERATOR
            </h1>
            <p className="text-xl text-black/80 max-w-3xl mx-auto">
              Transform student-athletes into digital legends with professional ESPN-quality hero cards 
              generated by advanced AI in under 60 seconds.
            </p>
          </motion.div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 py-16">
        <div className="grid lg:grid-cols-2 gap-12 items-start">
          
          {/* Player Selection & Controls */}
          <div className="space-y-8">
            <div>
              <h2 className="text-2xl font-black mb-6 flex items-center gap-3">
                <Target className="w-6 h-6 text-[#F59E0B]" />
                Select Demo Athlete
              </h2>
              
              <div className="grid gap-4">
                {demoPlayers.map((player, index) => (
                  <motion.button
                    key={index}
                    onClick={() => setSelectedPlayer(index)}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    className={`p-6 rounded-xl border-2 transition-all text-left ${
                      selectedPlayer === index
                        ? 'border-[#F59E0B] bg-[#F59E0B]/10'
                        : 'border-white/20 bg-white/5 hover:border-white/40'
                    }`}
                  >
                    <div className="flex items-center justify-between">
                      <div>
                        <h3 className="text-xl font-bold">{player.name}</h3>
                        <p className="text-white/70">{player.school}</p>
                        <div className="flex items-center gap-4 mt-2">
                          <span className="text-sm bg-white/10 px-2 py-1 rounded">
                            #{player.jersey} {player.position}
                          </span>
                          <span className="text-sm bg-white/10 px-2 py-1 rounded">
                            {player.sport}
                          </span>
                        </div>
                      </div>
                      {selectedPlayer === index && (
                        <Crown className="w-6 h-6 text-[#F59E0B]" />
                      )}
                    </div>
                  </motion.button>
                ))}
              </div>
            </div>

            {/* Generate Button */}
            <motion.button
              onClick={generateHeroCard}
              disabled={isGenerating}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className={`w-full py-6 rounded-xl font-black text-xl flex items-center justify-center gap-4 transition-all ${
                isGenerating
                  ? 'bg-gray-600 cursor-not-allowed'
                  : 'bg-gradient-to-r from-[#F59E0B] to-[#F97316] hover:shadow-2xl hover:shadow-[#F59E0B]/30'
              }`}
            >
              {isGenerating ? (
                <>
                  <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-white" />
                  AI GENERATING...
                </>
              ) : (
                <>
                  <Sparkles className="w-6 h-6" />
                  GENERATE AI HEROCARD
                  <Zap className="w-6 h-6" />
                </>
              )}
            </motion.button>

            {/* Player Stats */}
            <div className="bg-white/5 rounded-xl p-6">
              <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
                <Trophy className="w-5 h-5 text-[#F59E0B]" />
                Performance Stats
              </h3>
              <div className="grid grid-cols-2 gap-4">
                {Object.entries(currentPlayer.stats).map(([key, value]) => (
                  <div key={key} className="text-center">
                    <div className="text-2xl font-black text-[#F59E0B]">{value}</div>
                    <div className="text-sm text-white/70 capitalize">
                      {key.replace(/([A-Z])/g, ' $1').trim()}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Card Style Selection */}
            <div className="bg-white/5 rounded-xl p-6">
              <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
                <Sparkles className="w-5 h-5 text-[#F59E0B]" />
                HeroCard Style
              </h3>
              <div className="space-y-3">
                {cardStyles.map((style) => (
                  <button
                    key={style.id}
                    onClick={() => setSelectedStyle(style.id)}
                    className={`w-full p-3 rounded-lg border text-left transition-all ${
                      selectedStyle === style.id
                        ? 'border-[#F59E0B] bg-[#F59E0B]/10'
                        : 'border-white/20 bg-white/5 hover:border-white/40'
                    }`}
                  >
                    <div className="font-bold">{style.name}</div>
                    <div className="text-sm text-white/70">{style.description}</div>
                  </button>
                ))}
              </div>
            </div>

            {/* Advanced Customization */}
            <div className="bg-white/5 rounded-xl p-6">
              <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
                <Target className="w-5 h-5 text-[#F59E0B]" />
                Advanced Options
              </h3>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2">Layout Style</label>
                  <select 
                    value={customization.layout}
                    onChange={(e) => setCustomization({...customization, layout: e.target.value})}
                    className="w-full p-2 rounded bg-white/10 border border-white/20"
                  >
                    <option value="vertical">Vertical Portrait</option>
                    <option value="horizontal">Horizontal Landscape</option>
                    <option value="square">Square Instagram</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-2">Background Theme</label>
                  <select 
                    value={customization.background}
                    onChange={(e) => setCustomization({...customization, background: e.target.value})}
                    className="w-full p-2 rounded bg-white/10 border border-white/20"
                  >
                    <option value="stadium">Stadium Energy</option>
                    <option value="abstract">Abstract Geometric</option>
                    <option value="team">Team Colors</option>
                    <option value="minimal">Clean Minimal</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-2">Special Effects</label>
                  <div className="grid grid-cols-2 gap-2">
                    {['glow', 'particles', 'motion', 'shadows'].map((effect) => (
                      <label key={effect} className="flex items-center gap-2">
                        <input 
                          type="checkbox" 
                          checked={customization.effects.includes(effect)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setCustomization({
                                ...customization, 
                                effects: [...customization.effects, effect]
                              });
                            } else {
                              setCustomization({
                                ...customization, 
                                effects: customization.effects.filter(f => f !== effect)
                              });
                            }
                          }}
                          className="rounded"
                        />
                        <span className="text-sm capitalize">{effect}</span>
                      </label>
                    ))}
                  </div>
                </div>
              </div>
            </div>

            {/* Key Achievements */}
            <div className="bg-white/5 rounded-xl p-6">
              <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
                <Star className="w-5 h-5 text-[#F59E0B]" />
                Key Achievements
              </h3>
              <div className="space-y-2">
                {currentPlayer.achievements.map((achievement, index) => (
                  <div key={index} className="flex items-center gap-3">
                    <Crown className="w-4 h-4 text-[#F59E0B] flex-shrink-0" />
                    <span className="text-white/90">{achievement}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* HeroCard Preview */}
          <div className="sticky top-8">
            <AnimatePresence mode="wait">
              <motion.div
                key={selectedPlayer}
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.9 }}
                className="relative"
              >
                {/* HeroCard */}
                <div 
                  className="relative w-full aspect-[3/4] rounded-3xl overflow-hidden border-4"
                  style={{ 
                    borderColor: currentPlayer.colors.primary,
                    background: `linear-gradient(135deg, ${currentPlayer.colors.primary}20, ${currentPlayer.colors.secondary}20)` 
                  }}
                >
                  {/* Background Pattern */}
                  <div className="absolute inset-0 opacity-10">
                    <div className="w-full h-full bg-gradient-to-br from-white/20 to-transparent" />
                  </div>

                  {/* Content */}
                  <div className="relative p-8 h-full flex flex-col">
                    {/* School Badge */}
                    <div className="text-center mb-6">
                      <div 
                        className="inline-block px-4 py-2 rounded-full text-sm font-bold"
                        style={{ backgroundColor: currentPlayer.colors.primary }}
                      >
                        {currentPlayer.school.toUpperCase()}
                      </div>
                    </div>

                    {/* Player Photo Placeholder */}
                    <div className="flex-1 flex items-center justify-center mb-6">
                      <div 
                        className="w-48 h-48 rounded-full border-4 flex items-center justify-center text-6xl font-black"
                        style={{ 
                          borderColor: currentPlayer.colors.secondary,
                          backgroundColor: `${currentPlayer.colors.primary}40`
                        }}
                      >
                        #{currentPlayer.jersey}
                      </div>
                    </div>

                    {/* Player Info */}
                    <div className="text-center space-y-2">
                      <h2 className="text-3xl font-black text-white">
                        {currentPlayer.name}
                      </h2>
                      <p className="text-lg font-bold" style={{ color: currentPlayer.colors.secondary }}>
                        {currentPlayer.position} • {currentPlayer.sport}
                      </p>
                    </div>

                    {/* UltraPreps Branding */}
                    <div className="mt-6 text-center">
                      <div className="text-xs text-white/60 mb-2">POWERED BY</div>
                      <div className="flex items-center justify-center gap-2">
                        <Crown className="w-4 h-4 text-[#F59E0B]" />
                        <span className="font-black text-[#F59E0B]">ULTRAPREPS</span>
                      </div>
                    </div>
                  </div>

                  {/* Generation Overlay with Progress */}
                  {isGenerating && (
                    <div className="absolute inset-0 bg-black/90 flex items-center justify-center">
                      <div className="text-center max-w-xs">
                        <div className="relative mb-6">
                          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-[#F59E0B] mx-auto" />
                          <div className="absolute inset-0 flex items-center justify-center">
                            <span className="text-sm font-bold text-[#F59E0B]">{Math.round(generationProgress)}%</span>
                          </div>
                        </div>
                        
                        <div className="w-full bg-white/20 rounded-full h-2 mb-4">
                          <div 
                            className="bg-gradient-to-r from-[#F59E0B] to-[#F97316] h-2 rounded-full transition-all duration-300"
                            style={{ width: `${generationProgress}%` }}
                          />
                        </div>
                        
                        <p className="text-xl font-bold mb-2">AI Generating HeroCard</p>
                        <p className="text-white/70 text-sm">
                          {generationProgress < 15 ? 'Analyzing player data...' :
                           generationProgress < 30 ? 'Generating AI persona...' :
                           generationProgress < 50 ? 'Creating custom background...' :
                           generationProgress < 70 ? 'Applying team branding...' :
                           generationProgress < 85 ? 'Optimizing layout...' :
                           generationProgress < 95 ? 'Adding special effects...' :
                           'Finalizing HeroCard...'}
                        </p>
                        
                        <div className="mt-4 text-xs text-white/50">
                          Style: {cardStyles.find(s => s.id === selectedStyle)?.name} • 
                          Layout: {customization.layout} • 
                          Effects: {customization.effects.length}
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                {/* Action Buttons */}
                {!isGenerating && (
                  <motion.div 
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="mt-6 grid grid-cols-3 gap-4"
                  >
                    <button className="flex items-center justify-center gap-2 py-3 px-4 bg-white/10 hover:bg-white/20 rounded-xl transition-all">
                      <Download className="w-4 h-4" />
                      <span className="text-sm font-bold">Download</span>
                    </button>
                    <button className="flex items-center justify-center gap-2 py-3 px-4 bg-white/10 hover:bg-white/20 rounded-xl transition-all">
                      <Share className="w-4 h-4" />
                      <span className="text-sm font-bold">Share</span>
                    </button>
                    <button className="flex items-center justify-center gap-2 py-3 px-4 bg-[#F59E0B]/20 hover:bg-[#F59E0B]/30 rounded-xl transition-all">
                      <Play className="w-4 h-4" />
                      <span className="text-sm font-bold">Preview</span>
                    </button>
                  </motion.div>
                )}
              </motion.div>
            </AnimatePresence>
          </div>
        </div>

        {/* Value Proposition */}
        <div className="mt-24 text-center">
          <h2 className="text-4xl font-black mb-8">Why HeroCards Transform Athletic Programs</h2>
          <div className="grid md:grid-cols-3 gap-8 max-w-6xl mx-auto">
            <div className="bg-white/5 p-8 rounded-xl">
              <Trophy className="w-12 h-12 text-[#F59E0B] mx-auto mb-4" />
              <h3 className="text-xl font-bold mb-4">Professional Quality</h3>
              <p className="text-white/70">ESPN-grade designs that make every student-athlete look like a champion, boosting confidence and school pride.</p>
            </div>
            <div className="bg-white/5 p-8 rounded-xl">
              <Zap className="w-12 h-12 text-[#F59E0B] mx-auto mb-4" />
              <h3 className="text-xl font-bold mb-4">Instant Generation</h3>
              <p className="text-white/70">AI creates personalized hero cards in under 60 seconds, saving hours of design work and thousands in production costs.</p>
            </div>
            <div className="bg-white/5 p-8 rounded-xl">
              <Crown className="w-12 h-12 text-[#F59E0B] mx-auto mb-4" />
              <h3 className="text-xl font-bold mb-4">Recruiting Advantage</h3>
              <p className="text-white/70">Professional presentation materials that help student-athletes stand out to college recruiters and scholarship committees.</p>
            </div>
          </div>
        </div>

        {/* CTA */}
        <div className="mt-16 text-center">
          <Link
            href="/stadium/create"
            className="inline-flex items-center gap-4 px-12 py-6 bg-gradient-to-r from-[#F59E0B] to-[#F97316] rounded-2xl font-black text-xl hover:scale-105 transition-all shadow-2xl hover:shadow-[#F59E0B]/30"
          >
            <Crown className="w-7 h-7" />
            Create Your Digital Stadium
            <ArrowRight className="w-7 h-7" />
          </Link>
        </div>
      </div>
    </div>
  );
}