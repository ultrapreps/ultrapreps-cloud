import { NextRequest, NextResponse } from 'next/server';

interface StadiumData {
  username: string;
  schoolName: string;
  mascot: string;
  colors: {
    primary: string;
    secondary: string;
  };
  sports: string[];  // Keep as sports for API compatibility, but represents all activities
  goals: string[];
  bio: string;
}

interface CreatedStadium extends StadiumData {
  id: string;
  stadiumId: string;
  createdAt: string;
  heroCardGenerated: boolean;
  aiTrainerAssigned: boolean;
  heroCardStatus: string;
  aiTrainerStatus: string;
  aiTrainer: string;
  totalStadiums: number;
}

// In-memory storage for stadiums (in production, use a database)
const stadiums: CreatedStadium[] = [];

export async function POST(request: NextRequest) {
  try {
    const data: StadiumData = await request.json();
    
    // Validate required fields
    if (!data.username || !data.schoolName || !data.sports || !data.goals) {
      return NextResponse.json(
        { error: 'Username, school name, activities, and goals are required' },
        { status: 400 }
      );
    }

    // Check if username already exists
    const existingStadium = stadiums.find(stadium => stadium.username === data.username);
    if (existingStadium) {
      return NextResponse.json(
        { error: 'Username already taken' },
        { status: 409 }
      );
    }

    // Generate unique stadium ID
    const stadiumId = `stadium_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

    const primaryActivity = data.sports?.[0] || 'Student';
    
    // Universal AI Trainer Assignment based on activity type
    const getAITrainer = (activity: string): string => {
      if (activity.includes('Football')) return 'Coach Thunder âš¡';
      if (activity.includes('Basketball')) return 'Coach Blaze ðŸ”¥';
      if (activity.includes('Theater') || activity.includes('Drama')) return 'Director Spotlight ðŸŽ­';
      if (activity.includes('Band') || activity.includes('Music')) return 'Maestro Harmony ðŸŽµ';
      if (activity.includes('Math') || activity.includes('Academic')) return 'Professor Genius ðŸ§ ';
      if (activity.includes('Robotics') || activity.includes('STEM')) return 'Engineer Prime ðŸ¤–';
      if (activity.includes('Gaming') || activity.includes('Esports')) return 'GameMaster Elite ðŸŽ®';
      if (activity.includes('Art') || activity.includes('Visual')) return 'Artist Vision ðŸŽ¨';
      if (activity.includes('JROTC') || activity.includes('Military')) return 'Commander Steel ðŸª–';
      if (activity.includes('Student Council') || activity.includes('Leadership')) return 'Leader Supreme ðŸ‘‘';
      return 'Mentor Ultra ðŸŒŸ'; // Default universal mentor
    };

    // Create the stadium
    const newStadium: CreatedStadium = {
      ...data,
      id: stadiumId,
      stadiumId,
      createdAt: new Date().toISOString(),
      heroCardGenerated: false, // Will be generated by AI
      aiTrainerAssigned: false, // Will be assigned based on activity
      heroCardStatus: 'generating',
      aiTrainerStatus: 'assigning',
      aiTrainer: getAITrainer(primaryActivity),
      totalStadiums: stadiums.length + 1
    };

    stadiums.push(newStadium);

    // Simulate AI processing based on student activities
    console.log(`ðŸ¤– AI generating HeroCard for ${primaryActivity} student: ${data.username}`);
    
    setTimeout(async () => {
      // Here we would trigger:
      // 1. HeroCard generation via DesignMaster bot (activity-specific)
      // 2. AI Trainer assignment based on primary activity
      // 3. School theming application
      // 4. Welcome message from appropriate AI mentor
      
      newStadium.heroCardGenerated = true;
      newStadium.aiTrainerAssigned = true;
      
      console.log(`Stadium ${data.username} fully initialized with AI features`);
    }, 2000);

    // Log the creation
    console.log('New stadium created:', {
      username: data.username,
      school: data.schoolName,
      mascot: data.mascot,
      activities: data.sports,
      goals: data.goals,
      stadiumId,
      totalStadiums: stadiums.length
    });

    return NextResponse.json(
      { 
        success: true, 
        message: 'Stadium created successfully',
        stadium: {
          id: stadiumId,
          username: data.username,
          url: `/stadium/${data.username}`
        }
      },
      { status: 201 }
    );

  } catch (error) {
    console.error('Stadium creation error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// GET endpoint to retrieve stadium by username
export async function GET(request: NextRequest) {
  const url = new URL(request.url);
  const username = url.searchParams.get('username');

  if (!username) {
    return NextResponse.json(
      { error: 'Username parameter required' },
      { status: 400 }
    );
  }

  const stadium = stadiums.find(s => s.username === username);
  
  if (!stadium) {
    return NextResponse.json(
      { error: 'Stadium not found' },
      { status: 404 }
    );
  }

  return NextResponse.json({
    stadium: {
      ...stadium,
      // Don't expose internal IDs in public API
      id: undefined
    }
  });
}